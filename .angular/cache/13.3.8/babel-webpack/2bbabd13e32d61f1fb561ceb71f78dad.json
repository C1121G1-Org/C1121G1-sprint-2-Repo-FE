{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { AngularFireStorage } from '@angular/fire/storage';\nimport { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../service/guest/guest.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/fire/storage\";\nconst _c0 = [\"btnSuccess\"];\nconst _c1 = [\"btnCloseSuccess\"];\nexport let GuestSurveyComponent = /*#__PURE__*/(() => {\n  class GuestSurveyComponent {\n    constructor(fb, guestService, activeRoute, router, fireStorage) {\n      this.fb = fb;\n      this.guestService = guestService;\n      this.activeRoute = activeRoute;\n      this.router = router;\n      this.fireStorage = fireStorage;\n      this.targetResult = [];\n    }\n\n    ngOnInit() {\n      this.activeRoute.paramMap.subscribe(paramMap => {\n        this.userName = paramMap.get('userName');\n      });\n      this.updateForm = this.fb.group({\n        image: ['https://romanroadtrust.co.uk/wp-content/uploads/2018/01/profile-icon-png-898-300x300.png'],\n        favoriteList: this.fb.array([]),\n        maritalStatus: [''],\n        targetList: this.fb.array([]) // checkArray: this.fb.array([])\n\n      });\n      this.getAllTarget();\n      this.getAllFavorite();\n    }\n\n    get targetList() {\n      return this.updateForm.get('targetList');\n    }\n\n    get favoriteList() {\n      return this.updateForm.get('favoriteList');\n    }\n\n    get image() {\n      return this.updateForm.get('image');\n    } // private getTarget(){\n    //   return this.fb.group({\n    //     id: []\n    //   });\n    // }\n    //\n    // private addTarget(){\n    //   const control = this.updateForm.controls.target as FormArray;\n    //   control.push(this.getTarget());\n    // }\n    //\n    // private removeTarget(i: number){\n    //   const control = this.updateForm.controls.target as FormArray;\n    //   control.removeAt(i);\n    // }\n\n\n    getAllTarget() {\n      this.guestService.listTarget().subscribe(response => {\n        this.targets = response;\n      }, error => {\n        alert('FAILED');\n      });\n    }\n\n    getAllFavorite() {\n      this.guestService.listFavorite().subscribe(response => {\n        this.favorites = response;\n      }, error => {\n        alert('FAILED');\n      });\n    }\n\n    update() {\n      if (this.updateForm.invalid) {} else {\n        const nameImg = '/GUEST-' + this.userName + '.jpg';\n        const fileRef = this.fireStorage.ref(nameImg);\n        this.fireStorage.upload(nameImg, this.selectedImage).snapshotChanges().pipe(finalize(() => {\n          fileRef.getDownloadURL().subscribe(url => {\n            this.updateForm.patchValue({\n              image: url\n            });\n            this.guestService.update(this.updateForm.value, this.userName).subscribe(response => {\n              this.btnSuccess.nativeElement.click();\n            }, error => {});\n          });\n        })).subscribe();\n      }\n    }\n\n    onCheckboxTargetChange(idString, isChecked) {\n      const target = this.updateForm.controls.targetList; // tslint:disable-next-line:radix\n\n      let id = parseInt(idString);\n\n      if (isChecked) {\n        target.push(new FormControl(id));\n      } else {\n        const index = target.controls.findIndex(x => x.value === id);\n        target.removeAt(index);\n      }\n    }\n\n    onCheckboxFavoriteChange(idString, isChecked) {\n      const favorite = this.updateForm.controls.favoriteList; // tslint:disable-next-line:radix\n\n      let id = parseInt(idString);\n\n      if (isChecked) {\n        favorite.push(new FormControl(id));\n      } else {\n        const index = favorite.controls.findIndex(x => x.value === id);\n        favorite.removeAt(index);\n      }\n    } // readURL(input) {\n    //   if (input.files && input.files[0]) {\n    //     let reader = new FileReader();\n    //     reader.onload = e => {\n    //       $('#imagePreview').css('background-image', 'url(' + e.target.result + ')');\n    //       // tslint:disable-next-line:no-unused-expression\n    //       $('#imagePreview').hide;\n    //       $('#imagePreview').fadeIn(650);\n    //     };\n    //     // reader.onload = function (e) {\n    //     //   $('#imagePreview').css('background-image', 'url(' + e.target.result + ')');\n    //     //   $('#imagePreview').hide;\n    //     //   $('#imagePreview').fadeIn(650);\n    //     // };\n    //     reader.readAsDataURL(input.files[0]);\n    //   }\n    // }\n\n\n    onImageChange(event) {\n      this.selectedImage = event.target.files[0];\n      let reader = new FileReader();\n      reader.readAsDataURL(event.target.files[0]);\n\n      reader.onload = e => {\n        $('#imagePreview').css('background-image', 'url(' + e.target.result + ')'); // tslint:disable-next-line:no-unused-expression\n\n        $('#imagePreview').hide;\n        $('#imagePreview').fadeIn(650);\n        this.imageFB = reader.result; // this.imageFB = `/avatar_${event.target.files[0].name.split('.')[0]}.jpg`;\n      };\n    }\n\n    confirmSuccess() {\n      this.btnCloseSuccess.nativeElement.click();\n      this.router.navigate(['']);\n    }\n\n  }\n\n  GuestSurveyComponent.ɵfac = function GuestSurveyComponent_Factory(t) {\n    return new (t || GuestSurveyComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.GuestService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(AngularFireStorage));\n  };\n\n  GuestSurveyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GuestSurveyComponent,\n    selectors: [[\"app-guest-survey\"]],\n    viewQuery: function GuestSurveyComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.btnSuccess = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.btnCloseSuccess = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    template: function GuestSurveyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"guest-survey works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\"]\n  });\n  return GuestSurveyComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}