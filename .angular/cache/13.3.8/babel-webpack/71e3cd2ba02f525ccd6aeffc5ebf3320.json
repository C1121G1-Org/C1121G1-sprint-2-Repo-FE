{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../service/security.service\";\nimport * as i2 from \"../../../service/security/token-storage.service\";\nimport * as i3 from \"../../../service/security/share.service\";\nimport * as i4 from \"@angular/router\";\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(securityService, tokenStorageService, shareService, router) {\n      this.securityService = securityService;\n      this.tokenStorageService = tokenStorageService;\n      this.shareService = shareService;\n      this.router = router;\n      this.loginForm = new FormGroup({\n        username: new FormControl('', [Validators.required, Validators.maxLength(50)]),\n        password: new FormControl('', [Validators.required, Validators.maxLength(100)]),\n        remember_me: new FormControl()\n      });\n      this.roles = [];\n      this.errorMessage = '';\n    }\n\n    ngOnInit() {}\n\n    toggleShowPassword() {\n      this.showPassword = !this.showPassword;\n    }\n\n    login(errorModalBtn, closeErrorModal) {\n      console.log('haha');\n      this.securityService.login(this.loginForm.value).subscribe(data => {\n        if (this.loginForm.value.remember_me) {\n          this.tokenStorageService.saveTokenLocal(data.token);\n          this.tokenStorageService.saveUserLocal(data);\n          this.tokenStorageService.setRememberFlag();\n        } else {\n          // this.tokenStorageService.saveTokenLocal(data.token);\n          // this.tokenStorageService.saveUserLocal(data);\n          // this.tokenStorageService.setNoRememberFlag();\n          this.tokenStorageService.saveTokenSession(data.token);\n          this.tokenStorageService.saveUserSession(data);\n        }\n\n        this.securityService.isLoggedIn = true;\n        this.username = this.tokenStorageService.getUser().username;\n        this.roles = this.tokenStorageService.getUser().roles;\n        this.loginForm.reset();\n        this.shareService.sendClickEvent();\n        this.router.navigate(['']);\n      }, error => {\n        if (error.status === 403) {\n          this.errorMessage = 'Sai tên đăng nhập hoặc mật khẩu.'; // if (this.password?.valueChanges) {\n          //   this.errorMessage = '';\n          // }\n\n          this.securityService.isLoggedIn = false;\n        } else if (error.status === 0) {\n          errorModalBtn.click(); // tslint:disable-next-line:only-arrow-functions\n\n          setTimeout(function () {\n            closeErrorModal.click();\n          }, 3000);\n          this.securityService.isLoggedIn = false;\n        }\n      });\n    }\n\n    get usernameForm() {\n      return this.loginForm.get('username');\n    }\n\n    get password() {\n      return this.loginForm.get('password');\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.SecurityService), i0.ɵɵdirectiveInject(i2.TokenStorageService), i0.ɵɵdirectiveInject(i3.ShareService), i0.ɵɵdirectiveInject(i4.Router));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 2,\n    vars: 0,\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"login works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}